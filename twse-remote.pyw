from tkinter import *
from tkinter import ttk
import os, base64, subprocess

main = Tk()

__token__ = []
__id__ = []

class _console:
    class Compilation:
        def __init__(self):
            os.system("call scripts\\pyinstaller.exe -F build\\client.twse_remote")
    class _exec:
        def __init__(self):
            subprocess.call(
                "cscript msg.vbs"
            )
            __token__.clear()
            __id__.clear()
    class FasterLogger:
        def __init__(self, *_text):
            self._text=_text
        def __log__(self):
            if os.path.exists(
                'log.log'
            ) == True : self.__write__()
            else:
                with open(
                    'log.log', 
                    'w', 
                    encoding='UTF-8'
                ) : self.__write__()
        def __write__(self):
            with open(
                'log.log', 
                'a',
                encoding='UTF-8'
                ) as _log : _log.write('[ twse-remote ] - [ {} ]'.format(
                    self._text
                )
            )
    class MsgBox:
        def __init__(self, _title=str, _text=str, _style="vbOKOnly"):
            self._title = _title
            self._text = _text
            self._style = _style
        def __structure__(self) -> str:
            structure = """Dim Msg, Style, Title
Msg = "{}"
Style = {}
Title = "{}"
Response = msgbox(Msg, Style, Title)""".format(
                    self._text,
                    self._style,
                    self._title
                )
            return structure
        def __create__(self) -> bool:
            try:
                _load_structure = self.__structure__()
                with open(
                    r"msg.vbs", 
                    "w", 
                    encoding="UTF-16 LE"
                ) as _vbs_file : _vbs_file.write(
                    _load_structure
                )
                return True
            except:
                return False
    class FileHandlers(MsgBox):
        def __init__(self):
            self.__open__()
        def __structure__(self) -> str:
            __structure_decode__ = ''
            _decode = base64.b64decode(
                __structure_decode__.encode(
                    'utf-8'
                )
            )
            _decode_out = _decode.decode(
                'utf-8'
            )
            _for_out = _decode_out
            return _for_out
        def __open__(self):
            if os.path.exists('build') == True:
                _file = open(
                    r'build\client.twse_remote', 
                    'w',
                    encoding='utf-8'
                )
                self._file = _file
            else:
                os.mkdir(
                    "build"
                )
                _file = open(
                    r'build\client.twse_remote',
                    'w',
                    encoding='utf-8'
                )
                self._file = _file
        def __write__(self):
            _load_structure = self.__structure__()
            self._file.write(
                "token=\"{}\"\n".format(__token__[0])+"admin_id=\"{}\"\n".format(__id__[0])+_load_structure
            )
            self._file.close()
            if _console.MsgBox("TWSERemote", "Successfully", "vbOKOnly").__create__() == True: 
                _console._exec()
                _console.Compilation()

class _gui:
    _title = "twse-remote"
    _geometry = "600x300"
    def __init__(self):
        main.iconbitmap(
            "icon.ico"
        )
        main.title(
            self._title
        )
        main.geometry(
            self._geometry
        )
        main.resizable(
            False, 
            False
        )
        try:
            self.IDEntry = Entry(
                main,
                width=20
            )
            self.TokenEntry = Entry(
                main,
                width=30
            )
            Banner = Label(
                main,
                text="TWSERemote",
                font=('Arial', 20)
            )
            TokenText = Label(
                main,
                text="Insert your token"
            )
            IDText = Label(
                main,
                text="Insert your ID"
            )
            ButtonCreate = ttk.Button(
                main,
                text="Create",
                command=self.__load_parameters_token__
            )
        except:
            if _console.MsgBox("Error", "Error with labels", "vbCritical") == True : _console._exec("msg.vbs")
            else : _console.FasterLogger("Error at creating MsgBox with next", "\"Error with labels\"")
        finally:
            Banner.place(
                relx=self._position._Banner[0], 
                rely=self._position._Banner[1]
            )
            TokenText.place(
                relx=self._position._TokenText[0], 
                rely=self._position._TokenText[1]
            )
            self.TokenEntry.place(
                relx=self._position._TokenEntry[0],
                rely=self._position._TokenEntry[1]
            )
            ButtonCreate.place(
                relx=self._position._ButtonCreate[0],
                rely=self._position._ButtonCreate[1]
            )
            self.IDEntry.place(
                relx=self._position._IDEntry[0],
                rely=self._position._IDEntry[1]
            )
            IDText.place(
                relx=self._position._IDText[0],
                rely=self._position._IDText[1]
            )
    def __load_parameters_token__(self):
        __token__.append(
            self.TokenEntry.get()
        )
        __id__.append(
            self.IDEntry.get()
        )
        _console.FileHandlers().__write__()
    class _position:
        _Banner = [
            0.36, 
            0.03
        ]
        _TokenText = [
            0.435, 
            0.22
        ]
        _TokenEntry = [
            0.35, 
            0.3
        ]
        _ButtonCreate = [
            0.449, 
            0.6
        ]
        _IDEntry = [
            0.405, 
            0.5
        ]
        _IDText = [
            0.45, 
            0.4
        ]
if __name__ == "__main__": 
    _gui()
    main.mainloop()